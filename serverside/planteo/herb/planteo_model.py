# -*- coding: utf-8 -*-
"""planteo_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gw8R7qNI2Nl4hREY8hyB5tQXErx-O6IP
"""

# Importing libraries

from __future__ import print_function
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import classification_report
from sklearn import metrics
from sklearn import tree
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('serverside/planteo/herb/new_kitchen_gardening_data23.csv')

df.head()

df.tail()

numeric_df = df.select_dtypes(include=['int64', 'float64'])
sns.heatmap(numeric_df.corr(), annot=True)

features = df[['N', 'P','K','temperature', 'humidity', 'ph', 'rainfall']]
target = df['label']
labels = df['label']

acc = []
model = []

from sklearn.model_selection import train_test_split
Xtrain, Xtest, Ytrain, Ytest = train_test_split(features,target,test_size = 0.3,random_state =2)



from sklearn.naive_bayes import GaussianNB

NaiveBayes = GaussianNB()

NaiveBayes.fit(Xtrain,Ytrain)

predicted_values = NaiveBayes.predict(Xtest)
x = metrics.accuracy_score(Ytest, predicted_values)
acc.append(x)
model.append('Naive Bayes')
print("Naive Bayes's Accuracy is: ", x)

print(classification_report(Ytest,predicted_values))

from sklearn.naive_bayes import GaussianNB

NaiveBayes = GaussianNB()

NaiveBayes.fit(Xtrain,Ytrain)

predicted_values = NaiveBayes.predict(Xtest)
x = metrics.accuracy_score(Ytest, predicted_values)
acc.append(x)
model.append('Naive Bayes')
print("Naive Bayes's Accuracy is: ", x)

print(classification_report(Ytest,predicted_values))

import pickle
NB_pkl_filename = 'serverside/planteo/herb/function/NBClassifier.pkl'
NB_Model_pkl = open(NB_pkl_filename, 'wb')
pickle.dump(NaiveBayes, NB_Model_pkl)
NB_Model_pkl.close()

# import pickle

# # Load the model from the file
# NB_pkl_filename = 'sample_data/model/NBClassifier.pkl'  # Update with the correct path
# with open(NB_pkl_filename, 'rb') as file:
#     print("hello")
#     NaiveBayes = pickle.load(file)

# # Create a sample DataFrame with environmental data for Lahore
# env_data = {
#         'N': 26,
#         'P': 9,
#         'K': 15,
#         'temperature': 23,
#         'humidity': 65,
#         'ph': 6.6,
#         'rainfall': 150,
#     }

# sample_data = pd.DataFrame([env_data])

# probs = NaiveBayes.predict_proba(sample_data)

# class_labels = NaiveBayes.classes_

# # Get the top 10 most probable classes
# top_indices = np.argsort(probs[0])[-10:][::-1]
# top_10_plants = class_labels[top_indices]

# # Output the predictions
# print(top_10_plants)

from sklearn.ensemble import RandomForestClassifier

RF = RandomForestClassifier(n_estimators=20, random_state=0)
RF.fit(Xtrain,Ytrain)

predicted_values = RF.predict(Xtest)

x = metrics.accuracy_score(Ytest, predicted_values)
acc.append(x)
model.append('RF')
print("RF's Accuracy is: ", x)

print(classification_report(Ytest,predicted_values))

from sklearn.linear_model import LogisticRegression

LogReg = LogisticRegression(random_state=2)

LogReg.fit(Xtrain,Ytrain)

predicted_values = LogReg.predict(Xtest)

x = metrics.accuracy_score(Ytest, predicted_values)
acc.append(x)
model.append('Logistic Regression')
print("Logistic Regression's Accuracy is: ", x)

print(classification_report(Ytest,predicted_values))

plt.figure(figsize=[10,5],dpi = 100)
plt.title('Accuracy Comparison')
plt.xlabel('Accuracy')
plt.ylabel('Algorithm')
sns.barplot(x = acc,y = model,palette='dark')